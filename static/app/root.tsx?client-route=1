import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/app/root.tsx?client-route=1");import RefreshRuntime from "/@id/__x00__virtual:remix/hmr-runtime";const inWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;let prevRefreshReg;let prevRefreshSig;if (import.meta.hot && !inWebWorker) {  if (!window.__vite_plugin_react_preamble_installed__) {    throw new Error(      "Remix Vite plugin can't detect preamble. Something is wrong."    );  }  prevRefreshReg = window.$RefreshReg$;  prevRefreshSig = window.$RefreshSig$;  window.$RefreshReg$ = (type, id) => {    RefreshRuntime.register(type, "/Users/machine/dev/crypto/panoptic/remix-vite-template/app/root.tsx?client-route=1" + " " + id)  };  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;}export { Layout, ErrorBoundary, HydrateFallback, links, default } from "/app/root.tsx";
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("/Users/machine/dev/crypto/panoptic/remix-vite-template/app/root.tsx?client-route=1", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      undefined && window.__remixRouteModuleUpdates.set(undefined, nextExports);
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports, ["clientAction","clientLoader","handle","meta","links","shouldRevalidate"]);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvb3QudHN4P2NsaWVudC1yb3V0ZT0xIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnLi90YWlsd2luZC5jc3MnXG5pbXBvcnQgeyB0eXBlIExpbmtzRnVuY3Rpb24gfSBmcm9tICdAcmVtaXgtcnVuL25vZGUnXG5pbXBvcnQge1xuICBMaW5rcyxcbiAgTWV0YSxcbiAgT3V0bGV0LFxuICBTY3JpcHRzLFxuICBTY3JvbGxSZXN0b3JhdGlvbixcbn0gZnJvbSAnQHJlbWl4LXJ1bi9yZWFjdCdcbmltcG9ydCBEZWZhdWx0RXJyb3JCb3VuZGFyeSBmcm9tICd+L2NvbXBvbmVudHMvdWkvZXJyb3ItYm91bmRhcnknXG5pbXBvcnQgaWNvbnNIcmVmIGZyb20gJ34vY29tcG9uZW50cy91aS9pY29ucy9zcHJpdGUuc3ZnP3VybCdcblxuZXhwb3J0IGNvbnN0IGxpbmtzOiBMaW5rc0Z1bmN0aW9uID0gKCkgPT4gW1xuICB7IHJlbDogJ3ByZWZldGNoJywgaHJlZjogaWNvbnNIcmVmLCBhczogJ2ltYWdlJyB9LFxuXVxuXG5leHBvcnQgZnVuY3Rpb24gTGF5b3V0KHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8aHRtbCBsYW5nPVwiZW5cIj5cbiAgICAgIDxoZWFkPlxuICAgICAgICA8bWV0YSBjaGFyU2V0PVwidXRmLThcIiAvPlxuICAgICAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTFcIiAvPlxuICAgICAgICA8TWV0YSAvPlxuICAgICAgICA8TGlua3MgLz5cbiAgICAgIDwvaGVhZD5cbiAgICAgIDxib2R5IHN1cHByZXNzSHlkcmF0aW9uV2FybmluZz5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8U2Nyb2xsUmVzdG9yYXRpb24gLz5cbiAgICAgICAgPFNjcmlwdHMgLz5cbiAgICAgIDwvYm9keT5cbiAgICA8L2h0bWw+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXBwKCkge1xuICByZXR1cm4gPE91dGxldCAvPlxufVxuXG5leHBvcnQgZnVuY3Rpb24gRXJyb3JCb3VuZGFyeSgpIHtcbiAgcmV0dXJuIDxEZWZhdWx0RXJyb3JCb3VuZGFyeSAvPlxufVxuXG5leHBvcnQgZnVuY3Rpb24gSHlkcmF0ZUZhbGxiYWNrKCkge1xuICByZXR1cm4gPGgxPkxvYWRpbmcuLi48L2gxPlxufVxuIl0sIm1hcHBpbmdzIjoiQUFvQlE7QUFwQlIsT0FBTztBQUVQO0FBQUEsRUFDRTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxPQUNLO0FBQ1AsT0FBTywwQkFBMEI7QUFDakMsT0FBTyxlQUFlO0FBRWYsYUFBTSxRQUF1QixNQUFNO0FBQUEsRUFDeEMsRUFBRSxLQUFLLFlBQVksTUFBTSxXQUFXLElBQUksUUFBUTtBQUNsRDtBQUVPLGdCQUFTLE9BQU8sRUFBRSxTQUFTLEdBQWtDO0FBQ2xFLFNBQ0UsdUJBQUMsVUFBSyxNQUFLLE1BQ1Q7QUFBQSwyQkFBQyxVQUNDO0FBQUEsNkJBQUMsVUFBSyxTQUFRLFdBQWQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQUFzQjtBQUFBLE1BQ3RCLHVCQUFDLFVBQUssTUFBSyxZQUFXLFNBQVEseUNBQTlCO0FBQUE7QUFBQTtBQUFBO0FBQUEsYUFBb0U7QUFBQSxNQUNwRSx1QkFBQyxVQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUEsYUFBTTtBQUFBLE1BQ04sdUJBQUMsV0FBRDtBQUFBO0FBQUE7QUFBQTtBQUFBLGFBQU87QUFBQSxTQUpUO0FBQUE7QUFBQTtBQUFBO0FBQUEsV0FLQTtBQUFBLElBQ0EsdUJBQUMsVUFBSywwQkFBd0IsTUFDM0I7QUFBQTtBQUFBLE1BQ0QsdUJBQUMsdUJBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQUFtQjtBQUFBLE1BQ25CLHVCQUFDLGFBQUQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxhQUFTO0FBQUEsU0FIWDtBQUFBO0FBQUE7QUFBQTtBQUFBLFdBSUE7QUFBQSxPQVhGO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FZQTtBQUVKO0FBRUEsd0JBQXdCLE1BQU07QUFDNUIsU0FBTyx1QkFBQyxZQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FBUTtBQUNqQjtBQUVPLGdCQUFTLGdCQUFnQjtBQUM5QixTQUFPLHVCQUFDLDBCQUFEO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FBc0I7QUFDL0I7QUFFTyxnQkFBUyxrQkFBa0I7QUFDaEMsU0FBTyx1QkFBQyxRQUFHLDBCQUFKO0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FBYztBQUN2QjsiLCJuYW1lcyI6W119