import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/app/routes/error.tsx?client-route=1");import RefreshRuntime from "/@id/__x00__virtual:remix/hmr-runtime";const inWebWorker = typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;let prevRefreshReg;let prevRefreshSig;if (import.meta.hot && !inWebWorker) {  if (!window.__vite_plugin_react_preamble_installed__) {    throw new Error(      "Remix Vite plugin can't detect preamble. Something is wrong."    );  }  prevRefreshReg = window.$RefreshReg$;  prevRefreshSig = window.$RefreshSig$;  window.$RefreshReg$ = (type, id) => {    RefreshRuntime.register(type, "/Users/machine/dev/crypto/panoptic/remix-vite-template/app/routes/error.tsx?client-route=1" + " " + id)  };  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;}export { default, ErrorBoundary } from "/app/routes/error.tsx";
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("/Users/machine/dev/crypto/panoptic/remix-vite-template/app/routes/error.tsx?client-route=1", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      undefined && window.__remixRouteModuleUpdates.set(undefined, nextExports);
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports, ["clientAction","clientLoader","handle","meta","links","shouldRevalidate"]);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVycm9yLnRzeD9jbGllbnQtcm91dGU9MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqc29uLCB0eXBlIExvYWRlckZ1bmN0aW9uQXJncyB9IGZyb20gJ0ByZW1peC1ydW4vbm9kZSdcbmltcG9ydCB7IExpbmsgfSBmcm9tICdAcmVtaXgtcnVuL3JlYWN0J1xuaW1wb3J0IERlZmF1bHRFcnJvckJvdW5kYXJ5IGZyb20gJ34vY29tcG9uZW50cy91aS9lcnJvci1ib3VuZGFyeSdcbmltcG9ydCB7XG4gIGJhZFJlcXVlc3QsXG4gIGZvcmJpZGRlbixcbiAgaW52YWxpZCxcbiAgbm90Rm91bmQsXG4gIG5vdExvZ2dlZEluLFxufSBmcm9tICd+L3V0aWxzL3Jlc3BvbnNlcydcblxuZXhwb3J0IGNvbnN0IGxvYWRlciA9IGFzeW5jICh7IHJlcXVlc3QgfTogTG9hZGVyRnVuY3Rpb25BcmdzKSA9PiB7XG4gIGNvbnN0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpXG4gIGNvbnN0IHR5cGUgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgndHlwZScpXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3Rocm93JzpcbiAgICAgIHRocm93IG5ldyBFcnJvcigndGVzdCBzZXJ2ZXIgZXJyb3InKVxuICAgIGNhc2UgJ25vdGZvdW5kJzpcbiAgICAgIHRocm93IG5vdEZvdW5kKCdQYWdlIE5vdCBGb3VuZCcpXG4gICAgY2FzZSAnYmFkcmVxdWVzdCc6XG4gICAgICB0aHJvdyBiYWRSZXF1ZXN0KCdCYWQgUmVxdWVzdCcsIFtcbiAgICAgICAgJ21pc3NpbmcgcGFyYW0nLFxuICAgICAgICAndmFsdWUgbXVzdCBiZSBudW1iZXInLFxuICAgICAgICAnZXRjJyxcbiAgICAgIF0pXG4gICAgY2FzZSAnbm90bG9nZ2VkaW4nOlxuICAgICAgdGhyb3cgbm90TG9nZ2VkSW4oJ05vdCBMb2dnZWQgSW4nKVxuICAgIGNhc2UgJ2ZvcmJpZGRlbic6XG4gICAgICB0aHJvdyBmb3JiaWRkZW4oJ05vdCBBdXRob3JpemVkJylcbiAgICBjYXNlICdpbnZhbGlkJzpcbiAgICAgIHRocm93IGludmFsaWQoJ0ludmFsaWQnKVxuICB9XG5cbiAgcmV0dXJuIGpzb24oe30pXG59XG5cbmZ1bmN0aW9uIExheW91dCh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGUgfSkge1xuICBjb25zdCBoYW5kbGVDbGljayA9ICgpID0+IHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IGFsZXJ0KCdWaWV3IGNvbnNvbGUgZm9yIGVycm9yJyksIDEpXG4gICAgdGhyb3cgbmV3IEVycm9yKCd0ZXN0IGNsaWVudCBlcnJvcicpXG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibS00XCI+XG4gICAgICA8aDEgY2xhc3NOYW1lPVwibWItMiB0ZXh0LTJ4bCBmb250LWJvbGRcIj5UZXN0IEVycm9yPC9oMT5cbiAgICAgIDxMaW5rIHRvPVwiL1wiIGNsYXNzTmFtZT1cInVuZGVybGluZSBkZWNvcmF0aW9uLWRvdHRlZFwiPlxuICAgICAgICBSZXR1cm4gSG9tZVxuICAgICAgPC9MaW5rPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtdC0yIGZsZXggZ2FwLTJcIj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGNsYXNzTmFtZT1cInJvdW5kZWQgYmctcmVkLTUwMCBweC0yIHB5LTEgdGV4dC13aGl0ZVwiXG4gICAgICAgICAgb25DbGljaz17aGFuZGxlQ2xpY2t9XG4gICAgICAgID5cbiAgICAgICAgICBUaHJvdyBDbGllbnQgRXJyb3JcbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxhXG4gICAgICAgICAgaHJlZj1cIj90eXBlPXRocm93XCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJyb3VuZGVkIGJnLXJlZC01MDAgcHgtMiBweS0xIHRleHQtd2hpdGVcIlxuICAgICAgICA+XG4gICAgICAgICAgVGhyb3cgU2VydmVyIERvY3VtZW50IEVycm9yXG4gICAgICAgIDwvYT5cbiAgICAgICAgPExpbmtcbiAgICAgICAgICB0bz1cIj90eXBlPXRocm93XCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJyb3VuZGVkIGJnLXJlZC01MDAgcHgtMiBweS0xIHRleHQtd2hpdGVcIlxuICAgICAgICA+XG4gICAgICAgICAgVGhyb3cgU2VydmVyIERhdGEgRXJyb3JcbiAgICAgICAgPC9MaW5rPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LTIgZmxleCBnYXAtMlwiPlxuICAgICAgICA8TGlua1xuICAgICAgICAgIHRvPVwiP3R5cGU9bm90Zm91bmRcIlxuICAgICAgICAgIGNsYXNzTmFtZT1cInJvdW5kZWQgYmctYmx1ZS0yMDAgcHgtMiBweS0xIHRleHQtYmx1ZS05MDBcIlxuICAgICAgICA+XG4gICAgICAgICAgUmV0dXJuIE5vdCBGb3VuZCBFcnJvclxuICAgICAgICA8L0xpbms+XG4gICAgICAgIDxMaW5rXG4gICAgICAgICAgdG89XCI/dHlwZT1iYWRyZXF1ZXN0XCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJyb3VuZGVkIGJnLXllbGxvdy0yMDAgcHgtMiBweS0xICB0ZXh0LXllbGxvdy05MDBcIlxuICAgICAgICA+XG4gICAgICAgICAgUmV0dXJuIEJhZCBSZXF1ZXN0IEVycm9yXG4gICAgICAgIDwvTGluaz5cbiAgICAgICAgPExpbmtcbiAgICAgICAgICB0bz1cIj90eXBlPW5vdGxvZ2dlZGluXCJcbiAgICAgICAgICBjbGFzc05hbWU9XCJyb3VuZGVkIGJnLXB1cnBsZS0yMDAgcHgtMiBweS0xIHRleHQtcHVycGxlLTkwMFwiXG4gICAgICAgID5cbiAgICAgICAgICBSZXR1cm4gTm90IExvZ2dlZCBJbiBFcnJvclxuICAgICAgICA8L0xpbms+XG4gICAgICAgIDxMaW5rXG4gICAgICAgICAgdG89XCI/dHlwZT1mb3JiaWRkZW5cIlxuICAgICAgICAgIGNsYXNzTmFtZT1cInJvdW5kZWQgYmctb3JhbmdlLTIwMCBweC0yIHB5LTEgdGV4dC1vcmFuZ2UtOTAwXCJcbiAgICAgICAgPlxuICAgICAgICAgIFJldHVybiBGb3JiaWRkZW4gRXJyb3JcbiAgICAgICAgPC9MaW5rPlxuICAgICAgICA8TGlua1xuICAgICAgICAgIHRvPVwiP3R5cGU9aW52YWxpZFwiXG4gICAgICAgICAgY2xhc3NOYW1lPVwicm91bmRlZCBiZy15ZWxsb3ctMjAwIHB4LTIgcHktMSB0ZXh0LXllbGxvdy05MDBcIlxuICAgICAgICA+XG4gICAgICAgICAgUmV0dXJuIEludmFsaWQgRXJyb3JcbiAgICAgICAgPC9MaW5rPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm10LThcIj57Y2hpbGRyZW59PC9kaXY+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSW5kZXgoKSB7XG4gIHJldHVybiA8TGF5b3V0PjwvTGF5b3V0PlxufVxuXG5leHBvcnQgZnVuY3Rpb24gRXJyb3JCb3VuZGFyeSgpIHtcbiAgcmV0dXJuIChcbiAgICA8TGF5b3V0PlxuICAgICAgPERlZmF1bHRFcnJvckJvdW5kYXJ5IC8+XG4gICAgPC9MYXlvdXQ+XG4gIClcbn1cbiJdLCJtYXBwaW5ncyI6IkFBNENNO0FBNUNOLFNBQVMsWUFBcUM7QUFDOUMsU0FBUyxZQUFZO0FBQ3JCLE9BQU8sMEJBQTBCO0FBQ2pDO0FBQUEsRUFDRTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxPQUNLO0FBRUEsYUFBTSxTQUFTLE9BQU8sRUFBRSxRQUFRLE1BQTBCO0FBQy9ELFFBQU0sTUFBTSxJQUFJLElBQUksUUFBUSxHQUFHO0FBQy9CLFFBQU0sT0FBTyxJQUFJLGFBQWEsSUFBSSxNQUFNO0FBQ3hDLFVBQVEsTUFBTTtBQUFBLElBQ1osS0FBSztBQUNILFlBQU0sSUFBSSxNQUFNLG1CQUFtQjtBQUFBLElBQ3JDLEtBQUs7QUFDSCxZQUFNLFNBQVMsZ0JBQWdCO0FBQUEsSUFDakMsS0FBSztBQUNILFlBQU0s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